#!/usr/bin/env bash
#
# finishtask  –  clean up a disposable worktree and tmux session
#
# Usage:  finishtask
#
# Run this command from inside a tmux session created by starttask.
# It will:
#   • Detect the current worktree directory
#   • Remove the git worktree (after safety checks)
#   • Delete the worktree directory
#   • Remove the tmuxp config file
#   • Kill the current tmux session
#
# Safety: Won't proceed if there are uncommitted changes
#
set -euo pipefail

prog=$(basename "$0")

# ---- Detect if we're in a tmux session --------------------------------------
if [[ -z "${TMUX:-}" ]]; then
  echo "Error: finishtask must be run from inside a tmux session created by starttask" >&2
  exit 1
fi

# ---- Get current session name -----------------------------------------------
session_name=$(tmux display-message -p '#S')

# ---- Validate session name format -------------------------------------------
if [[ ! "$session_name" =~ ^[^-]+(-[^-]+)*-[0-9]+$ ]]; then
  echo "Error: Current session '$session_name' doesn't match expected format (project-slug)" >&2
  echo "This command only works with sessions created by starttask" >&2
  exit 1
fi

# ---- Extract project and slug -----------------------------------------------
project="${session_name%-*}"
slug="${session_name##*-}"

# ---- Verify we're in a worktree directory -----------------------------------
current_dir=$(pwd)
expected_wt_dir="$HOME/work/${project}-wt/$slug"

# Check if we're in the expected worktree or a subdirectory of it
if [[ "$current_dir" != "$expected_wt_dir" && "$current_dir" != "$expected_wt_dir"/* ]]; then
  echo "Error: Not in expected worktree directory" >&2
  echo "Expected: $expected_wt_dir (or subdirectory)" >&2
  echo "Current:  $current_dir" >&2
  exit 1
fi

# ---- Safety check: uncommitted changes --------------------------------------
cd "$expected_wt_dir"

# Check for uncommitted changes
if ! git diff --quiet || ! git diff --cached --quiet; then
  echo "Error: Uncommitted changes detected!" >&2
  echo "Please commit or stash your changes before running finishtask" >&2
  git status --short
  exit 1
fi

# Check for untracked files (excluding common ignore patterns)
untracked=$(git ls-files --others --exclude-standard | head -10)
if [[ -n "$untracked" ]]; then
  echo "Warning: Untracked files detected:" >&2
  echo "$untracked" | sed 's/^/  /' >&2
  echo "" >&2
  read -p "Continue anyway? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborted."
    exit 1
  fi
fi

# ---- Get branch info for final message --------------------------------------
current_branch=$(git rev-parse --abbrev-ref HEAD)
commit_count=$(git rev-list --count "$(git merge-base HEAD origin/main || git merge-base HEAD origin/master)"..HEAD 2>/dev/null || echo "0")

# ---- Remove git worktree ----------------------------------------------------
echo "Removing git worktree..."
main_repo="$HOME/work/$project"

# Remove the worktree
git -C "$main_repo" worktree remove "$expected_wt_dir" --force \
  || { echo "Error: Failed to remove worktree" >&2; exit 1; }

# ---- Clean up tmuxp config --------------------------------------------------
tmuxp_config="$HOME/agentyard/tmuxp/private/${project}-${slug}.yaml"
if [[ -f "$tmuxp_config" ]]; then
  echo "Removing tmuxp config..."
  rm -f "$tmuxp_config"
fi

# ---- Remove task from active tasks file -------------------------------------
active_tasks_file="$HOME/agentyard/state/active-tasks.txt"
if [[ -f "$active_tasks_file" ]]; then
  echo "Updating active tasks list..."
  # Create temp file without the current session
  temp_file=$(mktemp)
  awk -v session="$session_name" '
    /^- session_name:/ { 
      if ($3 == session) { skip=1 } 
      else { skip=0 }
    }
    !skip { print }
  ' "$active_tasks_file" > "$temp_file"
  mv "$temp_file" "$active_tasks_file"
fi

# ---- Success message --------------------------------------------------------
# Show success message before killing the session
cat <<EOF
✔ Task cleanup complete!
  - Branch: $current_branch ($commit_count commits)
  - Worktree removed: $expected_wt_dir
  - Session killed: $session_name

Remember to:
  - Push your branch if not already pushed
  - Create a PR if ready for review
  - Delete the remote branch after merge
EOF

# ---- Kill tmux session ------------------------------------------------------
echo ""
echo "Detaching from tmux session..."
# We need to detach first if we're inside the session we're killing
if [[ "$(tmux display-message -p '#S')" == "$session_name" ]]; then
  # Small delay to ensure message is visible
  sleep 1
  # Detach from tmux first, then kill the session
  # This prevents tmux from auto-switching to another session
  tmux detach-client
  # Kill the session after detaching (this runs in the parent shell)
  tmux kill-session -t "$session_name" 2>/dev/null || true
else
  # We're in a different session, just kill it
  tmux kill-session -t "$session_name"
fi